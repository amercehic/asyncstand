# Multi-stage Docker build optimized for Railway
FROM node:20-alpine AS base
RUN apk add --no-cache libc6-compat openssl
WORKDIR /app

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@10.15.0 --activate

# Dependencies stage
FROM base AS deps
# Copy workspace files
COPY pnpm-lock.yaml pnpm-workspace.yaml package.json ./
COPY apps/backend/package.json ./apps/backend/
COPY packages/shared/package.json ./packages/shared/
# Copy prisma schema for generation
COPY apps/backend/prisma ./apps/backend/prisma
# Install all dependencies
RUN pnpm install --frozen-lockfile

# Build stage
FROM deps AS build
# Copy source files
COPY tsconfig.base.json ./
COPY packages/shared ./packages/shared
COPY apps/backend ./apps/backend
# Build shared package
RUN pnpm --filter shared build
# Generate Prisma client
RUN cd apps/backend && npx prisma generate
# Build backend
RUN pnpm --filter backend build

# Production stage - use the build output with all dependencies
FROM node:20-alpine AS runner
RUN apk add --no-cache libc6-compat openssl
WORKDIR /app/apps/backend

ENV NODE_ENV=production

# Copy everything from build stage
COPY --from=build /app ./app

# Set working directory to backend
WORKDIR /app/apps/backend

# Remove source files, keep only built files
RUN rm -rf src && rm -rf /app/packages/shared/src

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => res.statusCode === 200 ? process.exit(0) : process.exit(1))"

EXPOSE 3001
CMD ["node", "dist/src/main.js"]
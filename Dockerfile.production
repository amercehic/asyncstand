# Production Dockerfile - optimized for size and security
FROM node:20-alpine AS base

# Install only essential runtime dependencies
RUN apk add --no-cache openssl

# Enable corepack for pnpm
RUN corepack enable && corepack prepare pnpm@10.15.0 --activate

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/backend/package.json ./apps/backend/
COPY apps/frontend/package.json ./apps/frontend/

# Install production dependencies only
FROM base AS deps
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile --prod

# Build stage
FROM base AS build
# Install all dependencies for building
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile
COPY . .
# Optimize build for production
ENV NODE_ENV=production
RUN pnpm build

# Production runtime - minimal image
FROM node:20-alpine AS production

# Security: Run as non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Install only essential runtime
RUN apk add --no-cache openssl && \
    corepack enable && corepack prepare pnpm@10.15.0 --activate

WORKDIR /app

# Copy only necessary files
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nodejs:nodejs /app/apps/backend/dist ./apps/backend/dist
COPY --from=build --chown=nodejs:nodejs /app/apps/backend/node_modules ./apps/backend/node_modules
COPY --from=build --chown=nodejs:nodejs /app/apps/backend/package.json ./apps/backend/package.json
COPY --from=build --chown=nodejs:nodejs /app/apps/frontend/dist ./apps/frontend/dist
COPY --from=build --chown=nodejs:nodejs /app/apps/frontend/node_modules ./apps/frontend/node_modules
COPY --from=build --chown=nodejs:nodejs /app/apps/frontend/package.json ./apps/frontend/package.json
COPY --chown=nodejs:nodejs package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Switch to non-root user
USER nodejs

# Production environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:' + (process.env.PORT || 3000) + '/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"

# Expose port
EXPOSE 3000

# Start production server
CMD ["pnpm", "start:prod"]
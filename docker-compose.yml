# Docker Compose for local development
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: asyncstand-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-asyncstand}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-asyncstand123}
      POSTGRES_DB: ${DB_NAME:-asyncstand}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - asyncstand-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-asyncstand}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: asyncstand-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - asyncstand-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: asyncstand-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${DB_USER:-asyncstand}:${DB_PASSWORD:-asyncstand123}@postgres:5432/${DB_NAME:-asyncstand}?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages
      - backend_node_modules:/app/apps/backend/node_modules
      - root_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - asyncstand-network
    command: sh -c "cd apps/backend && pnpm prisma migrate dev && pnpm dev"

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: build
    container_name: asyncstand-frontend
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000
    ports:
      - "5173:5173"
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - ./packages:/app/packages
      - frontend_node_modules:/app/apps/frontend/node_modules
      - root_node_modules:/app/node_modules
    networks:
      - asyncstand-network
    command: sh -c "cd apps/frontend && pnpm dev --host 0.0.0.0"

volumes:
  postgres_data:
  redis_data:
  backend_node_modules:
  frontend_node_modules:
  root_node_modules:

networks:
  asyncstand-network:
    driver: bridge
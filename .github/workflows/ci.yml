name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Quality checks - fast feedback
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check formatting
        run: pnpm format:check

      - name: Lint code
        run: pnpm lint

      - name: Type check
        run: pnpm turbo run typecheck

  # Build once, use everywhere
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality-checks]
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Generate build cache key
        id: cache-key
        run: echo "key=build-${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            packages/*/dist
            node_modules/.turbo
          key: ${{ steps.cache-key.outputs.key }}

  # Backend unit tests - fast, no external dependencies
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            packages/*/dist
            node_modules/.turbo
          key: ${{ needs.build.outputs.cache-key }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run backend unit tests
        run: pnpm --filter=backend test:unit:ci
        env:
          NODE_ENV: test
          CI: true

      - name: Upload backend unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-unit-test-results
          path: |
            apps/backend/test-results/
            apps/backend/coverage/
            apps/backend/junit.xml
          retention-days: 7

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: unit
          directory: apps/backend/coverage/
          fail_ci_if_error: false

  # Frontend unit and component tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            packages/*/dist
            node_modules/.turbo
          key: ${{ needs.build.outputs.cache-key }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run frontend tests
        run: pnpm --filter=frontend test:ci
        env:
          NODE_ENV: test
          CI: true
          VITE_API_URL: http://localhost:3000
          VITE_APP_NAME: AsyncStand
          VITE_APP_VERSION: 1.0.0
          VITE_NODE_ENV: test

      - name: Upload frontend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            apps/frontend/test-results/
            apps/frontend/coverage/
          retention-days: 7

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: frontend
          directory: apps/frontend/coverage/
          fail_ci_if_error: false

  # Backend integration tests - service-level testing with database
  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 10
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            packages/*/dist
            node_modules/.turbo
          key: ${{ needs.build.outputs.cache-key }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database
        working-directory: apps/backend
        run: |
          pnpm prisma generate
          pnpm prisma db push
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run integration tests
        run: pnpm --filter=backend test:integration:ci
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test_jwt_secret_for_ci
          CI: true

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            apps/backend/test-results/
            apps/backend/coverage/
            apps/backend/junit.xml
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: integration
          directory: apps/backend/coverage/
          fail_ci_if_error: false

  # Backend E2E tests - full API testing
  backend-e2e-tests:
    name: Backend E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 12
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            packages/*/dist
            node_modules/.turbo
          key: ${{ needs.build.outputs.cache-key }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database
        working-directory: apps/backend
        run: |
          pnpm prisma generate
          pnpm prisma db push
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run E2E tests
        run: pnpm --filter=backend test:e2e:ci
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test_jwt_secret_for_ci
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            apps/backend/test-results/
            apps/backend/coverage/
            apps/backend/junit.xml
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: e2e
          directory: apps/backend/coverage/
          fail_ci_if_error: false

  # Frontend E2E tests - browser-based testing
  # Temporarily disabled due to navigation timeout issues
  # frontend-e2e-tests:
  #   name: Frontend E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   timeout-minutes: 15
  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_USER: test_user
  #         POSTGRES_PASSWORD: test_password
  #         POSTGRES_DB: test_db
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4

  #     - name: Restore build cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           apps/*/dist
  #           packages/*/dist
  #           node_modules/.turbo
  #         key: ${{ needs.build.outputs.cache-key }}

  #     - name: Get pnpm store directory
  #       shell: bash
  #       run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

  #     - name: Setup pnpm cache
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.STORE_PATH }}
  #         key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pnpm-store-

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Setup database for backend
  #       working-directory: apps/backend
  #       run: |
  #         pnpm prisma generate
  #         pnpm prisma db push
  #       env:
  #         DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

  #     - name: Install Playwright browsers
  #       run: pnpm --filter=frontend test:e2e:install

  #     - name: Start backend server in background
  #       run: pnpm --filter=backend dev &
  #       env:
  #         NODE_ENV: test
  #         DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
  #         JWT_SECRET: test_jwt_secret_for_ci
  #         PORT: 3000

  #     - name: Wait for backend to be ready
  #       run: |
  #         timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'

  #     - name: Run Frontend E2E tests
  #       run: pnpm --filter=frontend test:e2e
  #       env:
  #         NODE_ENV: test
  #         CI: true
  #         VITE_API_URL: http://localhost:3000
  #         VITE_APP_NAME: AsyncStand
  #         VITE_APP_VERSION: 1.0.0
  #         VITE_NODE_ENV: test

  #     - name: Upload E2E test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: frontend-e2e-test-results
  #         path: |
  #           apps/frontend/e2e-results/
  #         retention-days: 7

  #     - name: Upload E2E screenshots
  #       uses: actions/upload-artifact@v4
  #       if: failure()
  #       with:
  #         name: frontend-e2e-screenshots
  #         path: |
  #           apps/frontend/e2e-results/screenshots/
  #           apps/frontend/test-results/
  #         retention-days: 7

  # Test summary - collect all results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests, backend-integration-tests, backend-e2e-tests]
    if: always()
    timeout-minutes: 3
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v5
        with:
          path: test-artifacts/

      - name: Create test summary
        run: |
          echo "# 🧪 Test Results Summary" > test-summary.md
          echo "" >> test-summary.md

          # Check results
          echo "| Test Type | Status | Result |" >> test-summary.md
          echo "|-----------|--------|--------|" >> test-summary.md
          echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result == 'success' && '✅' || '❌' }} | ${{ needs.backend-unit-tests.result }} |" >> test-summary.md
          echo "| Frontend Unit Tests | ${{ needs.frontend-unit-tests.result == 'success' && '✅' || '❌' }} | ${{ needs.frontend-unit-tests.result }} |" >> test-summary.md
          echo "| Backend Integration Tests | ${{ needs.backend-integration-tests.result == 'success' && '✅' || '❌' }} | ${{ needs.backend-integration-tests.result }} |" >> test-summary.md
          echo "| Backend E2E Tests | ${{ needs.backend-e2e-tests.result == 'success' && '✅' || '❌' }} | ${{ needs.backend-e2e-tests.result }} |" >> test-summary.md
          echo "| Frontend E2E Tests | ⏸️ | disabled |" >> test-summary.md
          echo "" >> test-summary.md

          # List artifacts
          echo "## 📁 Available Artifacts" >> test-summary.md
          find test-artifacts -name "*.xml" -o -name "test-report.html" | sort >> test-summary.md

          cat test-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 7

      - name: Comment test results on PR
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('test-summary.md')) {
              const summary = fs.readFileSync('test-summary.md', 'utf8');
              
              // Find existing comment and update or create new one
              const { data: comments } = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              const existingComment = comments.find(comment => 
                comment.body.includes('🧪 Test Results Summary')
              );
              
              if (existingComment) {
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
              }
            }
